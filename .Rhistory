shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
set.seed(100)
x <- matrix ( rnorm(1000*20), ncol=20 )
dd <- sample ( 1:1000, size=100 )
u <- matrix ( 2*rnorm(100), ncol=10, nrow=100 )
x[dd,11:20] <- x[dd,11:20] + u
y <- c(rep(1,10),rep(2,10))
data <- list ( x=x, y=y, geneid=as.character(1:nrow(x)), genenames=paste("g",as.character(1:nrow(x))) )
samr.obj <- samr ( data, resp.type="Two class unpaired", nperms=100, logged2=TRUE )
samr.obj <- samr ( data, resp.type="Two class unpaired", nperms=100, logged2=FALSE )
help(samr)
samr.obj <- samr ( data, resp.type="Two class unpaired", nperms=100)
samr.obj <- samr ( data, resp.type="Two class unpaired", nperms=100, logged2 = TRUE)
samr.obj <- samr ( data, resp.type="Two class unpaired", nperms=100, logged2 = FALSE)
help(sam)
help(samr)
samr.obj <- samr ( data, resp.type="Two class unpaired", nperms=100, logged2 = FALSE)
data=list(x=x,y=y, geneid=as.character(1:nrow(x)),
genenames=paste("g",as.character(1:nrow(x)),sep=""), logged2=TRUE)
samr.obj<-samr(data,  resp.type="Two class unpaired", nperms=100)
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
library(samr)
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
help(samr)
help(samr)
??samr
help(samr)
help("samr")
help(samr)
library(samr)
help(samr)
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
help(samr)
help(samr.plot)
help(samr.compute.siggenes.table)
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
help(samr.compute.delta.table)
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
help(SAMSEQ
)
help(SAMSeq)
help(SAMseq)
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
set.seed(100)
mu <- matrix(100, 1000, 20)
mu[1:100, 11:20] <- 200
mu <- scale(mu, center=FALSE, scale=runif(20, 0.5, 1.5))
x <- matrix(rpois(length(mu), mu), 1000, 20)
y <- c(rep(1, 10), rep(2, 10))
samfit <- SAMseq(x, y, resp.type = "Two class unpaired")
samfit
print(samfit)
plot(samfit)
ls(samfit)
samr.plot(samr.obj, 0.4)
samr.plot(samfit$samr.obj, 0.4)
samr.plot(samfit$samr.obj, 0.4)
samfit$delta.table
samr.compute.delta.table(samr.obj)
samr.compute.delta.table(samfit$samr.obj)
shiny::runApp('C:/Users/mike/Desktop/MAIN')
#   samr.obj = samr(data, resp.type = resp.type, assay.type = input$assay.type, s0.perc = NULL, nperms = input$nperms, center.arrays = center.arrays, testStatistic = input$testStatistic, time.summary.type = input$timeSummaryType,  regression.method = input$regressionMethod, random.seed = input$random.seed)
samfit = SAMseq(x,y, resp.type = resp.type)
samr.obj = samr(data, resp.type = resp.type)
set.seed(100)
x<-matrix(rnorm(1000*20),ncol=20)
dd<-sample(1:1000,size=100)
u<-matrix(2*rnorm(100),ncol=10,nrow=100)
x[dd,11:20]<-x[dd,11:20]+u
y<-c(rep(1,10),rep(2,10))
data=list(x=x,y=y, geneid=as.character(1:nrow(x)),
genenames=paste("g",as.character(1:nrow(x)),sep=""), logged2=TRUE)
samr.obj<-samr(data, resp.type="Two class unpaired", nperms=100)
ls(samr.obj)
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
remove(list = ls()0)
remove(list = ls())
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
paste("(input.assayType == "array" && (input.responseType_array == 'Two class unpaired' ||", "input.responseType_array == 'Two class paired' ||", "input.responseType_array == 'Two class unpaired timecourse' ||", "input.responseType_array == 'Two class paired timecourse'))")
paste("(input.assayType == 'array' && (input.responseType_array == 'Two class unpaired' ||", "input.responseType_array == 'Two class paired' ||", "input.responseType_array == 'Two class unpaired timecourse' ||", "input.responseType_array == 'Two class paired timecourse'))")
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
findLineNum()
help(findLineNum)
tracebacK()
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
github("SAM", "MikeJSeo")
runGit("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub
library(shiny)
runGitHub("SAM", "MikeJSeo")
library(shiny)
runGitHub("Sam", "MikeJSeo")
runGitHub("Sam", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
shiny::runApp('C:/Users/mike/Desktop/SAM')
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
getwd()
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(loadWorkbook)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(file.remove)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(saveWorkbook)
help(file.path)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
file.remove
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
C:/Users/mike/Desktop/SAM/result.xlsx
shell.exec("C:/Users/mike/Desktop/SAM/result.xlsx")
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp(C:/Users/mike/Desktop//result.xlsx")
shell("C:/Users/mike/Desktop//result.xlsx")
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
help(createName)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
result = matrix(nrow = 3, ncol = 1)
result = matrix(nrow = 3, ncol = 1)
colnames(result) = "value"
result
result[1,1] = nsets
library(GSA)
setwd("C:/Users/mike/Desktop/Examples")
data = read.csv("Two Class (Big).csv", header = FALSE)
y = as.matrix(data[1,c(-1,-2)])
x = data[-1, c(-1,-2)]
x = as.matrix(x)
class(x) = "numeric"
genenames = data[-1,2]
geneset.obj = GSA.read.gmt("fakePathways2.gmt")
genesets = geneset.obj$genesets
geneset.names = geneset.obj$geneset.names
GSA.obj = GSA(x,y, genenames=genenames, genesets=genesets, method = "maxmean", resp.type="Two class unpaired", nperms=100)
GSA.list = GSA.listsets(GSA.obj, geneset.names=geneset.names,FDRcut=2)
GSA.obj$gene.scores
GSA.correlate.revised(geneset.obj, genenames)
GSA.func.obj<-GSA.func(x,y, genenames=genenames, genesets=genesets, resp.type="Two class unpaired")
GSA.make.features(GSA.func.obj, x, genesets, genenames)
GSA.genesets.obj = genesets.obj
GSA.genesets.obj = genesets.obj
GSA.genesets.obj = geneset.obj
nsets=length(GSA.genesets.obj$genesets)
ngenes=unlist(lapply(GSA.genesets.obj$genesets,length))
allgenes=unlist(GSA.genesets.obj$genesets)
sets.in.exp=match(unique(allgenes),genenames)
exp.in.sets=match(genenames,allgenes)
nsets
result = matrix(nrow = 3, ncol = 1)
colnames(result) = "value"
rownames(result) = c("Number of gene-sets")
result[1,1] = nsets
result
result[1,1] = nsets
result[2,1] = sum(ngenes))
result[2,1] = sum(ngenes)
result
rownames(result) = c("Number of gene-sets", "Total number of genes in gene-set collection", "Total number of unique genes in gene-set collection", "Total number of genes in  genenames list", "Number of unique genes in both collections")
c("Number of gene-sets", "Total number of genes in gene-set collection", "Total number of unique genes in gene-set collection", "Total number of genes in  genenames list", "Number of unique genes in both collections")
result = matrix(nrow = 5, ncol = 1)
colnames(result) = "value"
rownames(result) = c("Number of gene-sets", "Total number of genes in gene-set collection", "Total number of unique genes in gene-set collection", "Total number of genes in  genenames list", "Number of unique genes in both collections", "Quantiles of fraction coverage of gene-sets")
result[1,1] = nsets
result[2,1] = sum(ngenes)
result[3,1] = length(unique(allgenes))
result[4,1] = length(unique(genenames))
result[5,1] = sum(!is.na(sets.in.exp))
rownames(result) = c("Number of gene-sets", "Total number of genes in gene-set collection", "Total number of unique genes in gene-set collection", "Total number of genes in  genenames list", "Number of unique genes in both collections")
result = matrix(nrow = 5, ncol = 1)
colnames(result) = "value"
rownames(result) = c("Number of gene-sets", "Total number of genes in gene-set collection", "Total number of unique genes in gene-set collection", "Total number of genes in  genenames list", "Number of unique genes in both collections")
result[1,1] = nsets
result[2,1] = sum(ngenes)
result[3,1] = length(unique(allgenes))
result[4,1] = length(unique(genenames))
result[5,1] = sum(!is.na(sets.in.exp))
result
sets.in.exp
library(GSA)
setwd("C:/Users/mike/Desktop/Examples")
data = read.csv("Two Class (Big).csv", header = FALSE)
y = as.matrix(data[1,c(-1,-2)])
x = data[-1, c(-1,-2)]
x = as.matrix(x)
class(x) = "numeric"
genenames = data[-1,2]
geneset.obj = GSA.read.gmt("fakePathways2.gmt")
genesets = geneset.obj$genesets
geneset.names = geneset.obj$geneset.names
GSA.obj = GSA(x,y, genenames=genenames, genesets=genesets, method = "maxmean", resp.type="Two class unpaired", nperms=100)
GSA.list = GSA.listsets(GSA.obj, geneset.names=geneset.names,FDRcut=2)
GSA.obj$gene.scores
GSA.correlate.revised(geneset.obj, genenames)
geneset.obj = GSA.read.gmt("fakePathways2.gmt")
genesets = geneset.obj$genesets
geneset.names = geneset.obj$geneset.names
genesets
geneset.names
GSA.obj = GSA(x,y, genenames=genenames, genesets=genesets, method = "maxmean", resp.type="Two class unpaired", nperms=100)
library(GSA)
setwd("C:/Users/mike/Desktop/Examples")
y = as.matrix(data[1,c(-1,-2)])
x = data[-1, c(-1,-2)]
x = as.matrix(x)
class(x) = "numeric"
genenames = data[-1,2]
genesets = geneset.obj$genesets
geneset.names = geneset.obj$geneset.names
GSA.list = GSA.listsets(GSA.obj, geneset.names=geneset.names,FDRcut=2)
GSA.obj$gene.scores
GSA.correlate.revised(geneset.obj, genenames)
GSA.obj = GSA(x,y, genenames=genenames, genesets=genesets, method = "maxmean", resp.type="Two class unpaired", nperms=100)
data = read.csv("Two Class.csv", header = FALSE)
geneset.obj = GSA.read.gmt("fakePathways2.gmt")
library(GSA)
setwd("C:/Users/mike/Desktop/Examples")
data = read.csv("Two Class.csv", header = FALSE)
y = as.matrix(data[1,c(-1,-2)])
x = data[-1, c(-1,-2)]
x = as.matrix(x)
class(x) = "numeric"
genenames = data[-1,2]
geneset.obj = GSA.read.gmt("fakePathways2.gmt")
genesets = geneset.obj$genesets
geneset.names = geneset.obj$geneset.names
GSA.obj = GSA(x,y, genenames=genenames, genesets=genesets, method = "maxmean", resp.type="Two class unpaired", nperms=100)
GSA.list = GSA.listsets(GSA.obj, geneset.names=geneset.names,FDRcut=2)
GSA.correlate.revised(geneset.obj, genenames)
result = matrix(nrow = 5, ncol = 1)
colnames(result) = "value"
rownames(result) = c("Number of gene-sets", "Total number of genes in gene-set collection", "Total number of unique genes in gene-set collection", "Total number of genes in  genenames list", "Number of unique genes in both collections")
result[1,1] = nsets
result[2,1] = sum(ngenes)
result[3,1] = length(unique(allgenes))
result[4,1] = length(unique(genenames))
result[5,1] = sum(!is.na(sets.in.exp))
result
nsets=length(GSA.genesets.obj$genesets)
ngenes=unlist(lapply(GSA.genesets.obj$genesets,length))
allgenes=unlist(GSA.genesets.obj$genesets)
sets.in.exp=match(unique(allgenes),genenames)
exp.in.sets=match(genenames,allgenes)
result = matrix(nrow = 5, ncol = 1)
colnames(result) = "value"
rownames(result) = c("Number of gene-sets", "Total number of genes in gene-set collection", "Total number of unique genes in gene-set collection", "Total number of genes in  genenames list", "Number of unique genes in both collections")
result[1,1] = nsets
result[2,1] = sum(ngenes)
result[3,1] = length(unique(allgenes))
result[4,1] = length(unique(genenames))
result[5,1] = sum(!is.na(sets.in.exp))
result
GSA.correlate(geneset.obj, genenames)
GSA.correlate
result = matrix(nrow = 6, ncol = 1)
colnames(result) = "value"
rownames(result) = c("Number of gene-sets", "Total number of genes in gene-set collection", "Total number of unique genes in gene-set collection", "Total number of genes in  genenames list", "Total number of unique genes in genenames list", "Number of unique genes in both collections")
result[1,1] = nsets
result[2,1] = sum(ngenes)
result[3,1] = length(unique(allgenes))
result[4,1] = length(genenames)
result[5,1] = length(unique(genenames))
result[6,1] = sum(!is.na(sets.in.exp))
result
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
QuantileCoverage =  quantile(nn/ngenes, seq(0,1,by=.1))
nn=rep(NA,nsets)
for(i in 1:nsets){
nn[i]=sum(!is.na(match(GSA.genesets.obj$genesets[[i]],genenames)))
}
QuantileCoverage =  quantile(nn/ngenes, seq(0,1,by=.1))
QuantileCoverage
help(quantile)
res = matrix(as.numeric(NA), 1, 11)
QuantileCoverage =  quantile(nn/ngenes, seq(0,1,by=.1))
res = matrix(as.numeric(NA), 1, 11)
res[1,] = QuantileCoverage
rownames(res) = names(QuantileCoverage)
names(QuantileCoverage)
res = matrix(as.numeric(NA), 1, 11)
res[1,] = QuantileCoverage
res
QuantileCoverage =  quantile(nn/ngenes, seq(0,1,by=.1))
res = matrix(as.numeric(NA), 1, 11)
res[1,] = QuantileCoverage
dimnames(res) = list("value", names(QuantileCoverage)
)
res
geneset.obj$geneset
geneset.obj$genesets
geneset.obj$genesets[[1]]
match(geneset.obj$genesets[[1]], genenames)
!is.na(match(geneset.obj$genesets[[1]], genenames))
nn
nn/ngenes
QuantileCoverage = res
QuantileCoverage
shiny::runApp('C:/Users/mike/Desktop/SAM')
tableGenes
tableGenes = table(ngenes, dnn = "Table of number of genes in genesets")
tabbleGenes
tableGenes
tableGenes[[1]]
tableGenes[1,
]
tableGenes[1]
names(tableGenes)
ls(tableGenes)
tableGenes[[1]]
names(tableGenes)
tableGenesN = length(names(tableGenes))
tabelGenesN
tableGenes = table(ngenes, dnn = "Table of number of genes in genesets")
tableGenesN = length(names(tableGenes))
res2 = matrix(as.numeric(NA), 1, tableGenesN)
dimnames(res2) = list(count, names(tableGenes))
for(i in 1:tableGenesN){
res[1,i] = tableGenes[[i]]
}
tableGenes = table(ngenes, dnn = "Table of number of genes in genesets")
tableGenesN = length(names(tableGenes))
res2 = matrix(as.numeric(NA), 1, tableGenesN)
dimnames(res2) = list(count, names(tableGenes))
for(i in 1:tableGenesN){
res2[1,i] = tableGenes[[i]]
}
shiny::runApp('C:/Users/mike/Desktop/SAM')
tableGenes = table(ngenes, dnn = "Table of number of genes in genesets")
tableGenesN = length(names(tableGenes))
res2 = matrix(as.numeric(NA), 1, tableGenesN)
dimnames(res2) = list("count", names(tableGenes))
for(i in 1:tableGenesN){
res2[1,i] = tableGenes[[i]]
}
res2
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
runApp("SAM")
runApp("SA<")
runApp("SAM")
setwd("C:/Users/mike/Desktop/Examples")
runApp("SAM")
setwd("C:/Users/mike/Desktop/SAM")
setwd("C:/Users/mike/Desktop")
setwd("C:/Users/mike/Desktop/SAM")
setwd("C:/Users/mike/Desktop")
runApp("SAM")
