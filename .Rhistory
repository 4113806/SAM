shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/trial2')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
library(samr)
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/trial')
help(samr)
help(samr)
??samr
help(samr)
help("samr")
help(samr)
library(samr)
help(samr)
shiny::runApp('C:/Users/mike/Desktop/trial')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
help(samr)
help(samr.plot)
help(samr.compute.siggenes.table)
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
help(samr.compute.delta.table)
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
help(SAMSEQ
)
help(SAMSeq)
help(SAMseq)
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
set.seed(100)
mu <- matrix(100, 1000, 20)
mu[1:100, 11:20] <- 200
mu <- scale(mu, center=FALSE, scale=runif(20, 0.5, 1.5))
x <- matrix(rpois(length(mu), mu), 1000, 20)
y <- c(rep(1, 10), rep(2, 10))
samfit <- SAMseq(x, y, resp.type = "Two class unpaired")
samfit
print(samfit)
plot(samfit)
ls(samfit)
samr.plot(samr.obj, 0.4)
samr.plot(samfit$samr.obj, 0.4)
samr.plot(samfit$samr.obj, 0.4)
samfit$delta.table
samr.compute.delta.table(samr.obj)
samr.compute.delta.table(samfit$samr.obj)
shiny::runApp('C:/Users/mike/Desktop/MAIN')
#   samr.obj = samr(data, resp.type = resp.type, assay.type = input$assay.type, s0.perc = NULL, nperms = input$nperms, center.arrays = center.arrays, testStatistic = input$testStatistic, time.summary.type = input$timeSummaryType,  regression.method = input$regressionMethod, random.seed = input$random.seed)
samfit = SAMseq(x,y, resp.type = resp.type)
samr.obj = samr(data, resp.type = resp.type)
set.seed(100)
x<-matrix(rnorm(1000*20),ncol=20)
dd<-sample(1:1000,size=100)
u<-matrix(2*rnorm(100),ncol=10,nrow=100)
x[dd,11:20]<-x[dd,11:20]+u
y<-c(rep(1,10),rep(2,10))
data=list(x=x,y=y, geneid=as.character(1:nrow(x)),
genenames=paste("g",as.character(1:nrow(x)),sep=""), logged2=TRUE)
samr.obj<-samr(data, resp.type="Two class unpaired", nperms=100)
ls(samr.obj)
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
remove(list = ls()0)
remove(list = ls())
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
paste("(input.assayType == "array" && (input.responseType_array == 'Two class unpaired' ||", "input.responseType_array == 'Two class paired' ||", "input.responseType_array == 'Two class unpaired timecourse' ||", "input.responseType_array == 'Two class paired timecourse'))")
paste("(input.assayType == 'array' && (input.responseType_array == 'Two class unpaired' ||", "input.responseType_array == 'Two class paired' ||", "input.responseType_array == 'Two class unpaired timecourse' ||", "input.responseType_array == 'Two class paired timecourse'))")
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/MAIN')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
findLineNum()
help(findLineNum)
tracebacK()
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
github("SAM", "MikeJSeo")
runGit("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub
library(shiny)
runGitHub("SAM", "MikeJSeo")
library(shiny)
runGitHub("Sam", "MikeJSeo")
runGitHub("Sam", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
shiny::runApp('C:/Users/mike/Desktop/SAM')
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
runGitHub("SAM", "MikeJSeo")
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
getwd()
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(loadWorkbook)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(file.remove)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(saveWorkbook)
help(file.path)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
file.remove
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
C:/Users/mike/Desktop/SAM/result.xlsx
shell.exec("C:/Users/mike/Desktop/SAM/result.xlsx")
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(loadWorkbook)
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(read.csv)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
})
current = matrix(NA, nrow = 10, ncol = 1)
current
colnames(current) = "value"
current
current[1]
current[1,1]
current[,1]
current[1,1] = 123
current
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
remove(list = ls9)
remove(list = ls())
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
remove(list = ls())
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
current = matrix(NA, nrow = 8, ncol = 1)
rownames(current) = c("Data Type","Estimate of s0 factor","Number of neighbors for KNN", "Random seed", "Response type", "Analysis type", "Median center", "Regression method")
colnames(current) = "value"
current[2,1] = s0.perc
N
current = matrix(NA, nrow = 8, ncol = 1)
current[2,1] = 3
current
remove(list = ls())
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
package.install("Hmisc")
install.packages("Hmisc")
library(Hmisc)
capitalize
grep
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
current2 = matrix(NA, nrow =14, ncol = 1)
current2
current[c(-11,-12,-13,-14),]
current2[c(-11,-12,-13,-14),]
shiny::runApp('C:/Users/mike/Desktop/SAM')
current = matrix(1:5)
current
current[c(-3,-4,-5),]
current[c(-3,-4,-5)]
current[c(-3,-4,-5),1]
current[c(-3,-4,-5),]
matrix(current[c(-3,-4,-5),], ncol = 1)
shiny::runApp('C:/Users/mike/Desktop/SAM')
current
current[c(1,2,3),]
current[c(1,2,3)]
current[c(1,2,3),1]
current[,1]
current[1,]
current[c(1,2),]
rownames_current = c("File Name", "Data Type", "Estimate of s0 factor","Number of neighbors for KNN", "Number of permutations", "Random seed", "Delta value", "Response type", "Analysis type", "Median center", "Regression method", "Test statistic", "Data logged", "Time summary type")
rownames_current[c(-11,-12,-13,14)]
rownames_current[c(-11,-12,-13,-14)]
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
library(sam)
library(samr)
#generate some example data
set.seed(100)
x<-matrix(rnorm(1000*20),ncol=20)
dd<-sample(1:1000,size=100)
u<-matrix(2*rnorm(100),ncol=10,nrow=100)
x[dd,11:20]<-x[dd,11:20]+u
y<-c(rep(1,10),rep(2,10))
data=list(x=x,y=y, geneid=as.character(1:nrow(x)),
genenames=paste("g",as.character(1:nrow(x)),sep=""), logged2=TRUE)
samr.obj<-samr(data, resp.type="Two class unpaired", nperms=100)
delta.table<-samr.compute.delta.table(samr.obj)
del<- 0.3
siggenes.table<- samr.compute.siggenes.table(samr.obj, del, data, delta.table)
samr.missrate(samr.obj, del, delta.table)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(samr.missrate)
shiny::runApp('C:/Users/mike/Desktop/SAM')
capitalize
word = "apple"
substr(word, 1, 1)
str = 'sherlock holmes'
str = 'sherlock holmes'
letters = strsplit(str,'')
letters
letters[[1]]
capitalize = function(word){
letters = strsplit(word,'')
theletters = letters[[1]]
theletters[1] = toupper(theletters[1])
paste(theletters,collapse='')
}
capitalize("apple")
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(GSA)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
####make gmt File!
setwd("C:/Users/mike/Desktop/Examples")
data = read.csv("Paired.csv", header = FALSE)
genenames = data[-1,2]
for(i in 1:50){
size = sample(seq.int(from = 20, to = 50), size = 1)
geneset = as.character(sample(genenames,size = size))
geneset.names=paste("set",as.character(i),sep="")
geneset = c(geneset.names, "No description", geneset)
cat(geneset, file = "outfile.txt", sep = "\t", append = TRUE)
cat("", file = "outfile.txt", sep = "\n", append = TRUE)
}
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(samr)
help(GSA)
help(samr)
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
help(GSA)
help(samr)
help(GSA)
rownames_current = c("File Name", "Gene set (gmt) file", "Data Type", "False discovery rate (in each tail)", "Number of permutations", "Input percentile for exchangeability factor s0", "Number of neighbors for KNN", "Minimum gene set size", "Maximum gene set size", "Seed for Random number generator")
rownames_current
remove(list = ls())
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
####make gmt File!
setwd("C:/Users/mike/Desktop/Examples")
data = read.csv("Survival.csv", header = FALSE)
genenames = data[-1,2]
for(i in 1:50){
size = sample(seq.int(from = 20, to = 50), size = 1)
geneset = as.character(sample(genenames,size = size))
geneset.names=paste("set",as.character(i),sep="")
geneset = c(geneset.names, "No description", geneset)
cat(geneset, file = "outfile.txt", sep = "\t", append = TRUE)
cat("", file = "outfile.txt", sep = "\n", append = TRUE)
}
####make gmt File!
setwd("C:/Users/mike/Desktop/Examples")
data = read.csv("Survival.csv", header = FALSE)
genenames = data[-1,2]
for(i in 1:50){
size = sample(seq.int(from = 20, to = 50), size = 1)
geneset = as.character(sample(genenames,size = size))
geneset.names=paste("set",as.character(i),sep="")
geneset = c(geneset.names, "No description", geneset)
cat(geneset, file = "outfile.txt", sep = "\t", append = TRUE)
cat("", file = "outfile.txt", sep = "\n", append = TRUE)
}
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
####make gmt File!
setwd("C:/Users/mike/Desktop/Examples")
data = read.csv("Quantitative.csv", header = FALSE)
genenames = data[-1,2]
for(i in 1:50){
size = sample(seq.int(from = 20, to = 50), size = 1)
geneset = as.character(sample(genenames,size = size))
geneset.names=paste("set",as.character(i),sep="")
geneset = c(geneset.names, "No description", geneset)
cat(geneset, file = "outfile.txt", sep = "\t", append = TRUE)
cat("", file = "outfile.txt", sep = "\n", append = TRUE)
}
}
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
####make gmt File!
setwd("C:/Users/mike/Desktop/Examples")
data = read.csv("Multiclass.csv", header = FALSE)
genenames = data[-1,2]
for(i in 1:50){
size = sample(seq.int(from = 20, to = 50), size = 1)
geneset = as.character(sample(genenames,size = size))
geneset.names=paste("set",as.character(i),sep="")
geneset = c(geneset.names, "No description", geneset)
cat(geneset, file = "outfile.txt", sep = "\t", append = TRUE)
cat("", file = "outfile.txt", sep = "\n", append = TRUE)
}
####make gmt File!
setwd("C:/Users/mike/Desktop/Examples")
data = read.csv("Multi Class.csv", header = FALSE)
genenames = data[-1,2]
for(i in 1:50){
size = sample(seq.int(from = 20, to = 50), size = 1)
geneset = as.character(sample(genenames,size = size))
geneset.names=paste("set",as.character(i),sep="")
geneset = c(geneset.names, "No description", geneset)
cat(geneset, file = "outfile.txt", sep = "\t", append = TRUE)
cat("", file = "outfile.txt", sep = "\n", append = TRUE)
}
####make gmt File!
setwd("C:/Users/mike/Desktop/Examples")
data = read.csv("Multi Class.csv", header = FALSE)
genenames = data[-1,2]
for(i in 1:50){
size = sample(seq.int(from = 20, to = 50), size = 1)
geneset = as.character(sample(genenames,size = size))
geneset.names=paste("set",as.character(i),sep="")
geneset = c(geneset.names, "No description", geneset)
cat(geneset, file = "outfile.txt", sep = "\t", append = TRUE)
cat("", file = "outfile.txt", sep = "\n", append = TRUE)
}
size = sample(seq.int(from = 20, to = 50), size = 1)
remove(list = ls())
shiny::runApp('C:/Users/mike/Desktop/SAM')
GSA.listsets
help(GSA.listsets)
######### two class unpaired comparison
# y must take values 1,2
set.seed(100)
x<-matrix(rnorm(1000*20),ncol=20)
dd<-sample(1:1000,size=100)
u<-matrix(2*rnorm(100),ncol=10,nrow=100)
x[dd,11:20]<-x[dd,11:20]+u
y<-c(rep(1,10),rep(2,10))
genenames=paste("g",1:1000,sep="")
#create some radnom gene sets
genesets=vector("list",50)
for(i in 1:50){
genesets[[i]]=paste("g",sample(1:1000,size=30),sep="")
}
geneset.names=paste("set",as.character(1:50),sep="")
GSA.obj<-GSA(x,y, genenames=genenames, genesets=genesets,  resp.type="Two class unpaired", nperms=100)
GSA.listsets.revised(GSA.obj, geneset.names=geneset.names,FDRcut=.5)
GSA.list = GSA.listsets(GSA.obj, geneset.names=geneset.names,FDRcut=.5)
GSA.list
GSA.list$negative
GSA.list$negative[1]
GSA.list$negative[1]
GSA.list = GSA.listsets(GSA.obj, geneset.names=geneset.names,FDRcut=.1)
GSA.list
GSA.list = GSA.listsets(GSA.obj, geneset.names=geneset.names,FDRcut=0)
GSA.list
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
shiny::runApp('C:/Users/mike/Desktop/SAM')
